# -*- coding: utf-8 -*-
"""fake transactions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jv-ro3uz_6H8sQBzIU-vG0mcZz3VqZ6N
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_csv('/content/fraud_train.csv')

df.head()

df.info()

df.describe()

sns.heatmap(df.corr())

X= df.drop('Class', axis=1)
y= df['Class']

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2)

scaler = StandardScaler()
scaled_x_train = scaler.fit_transform(X_train)
scaled_x_test = scaler.transform(X_test)

pca=PCA(n_components=2)
pca_train=pca.fit_transform(scaled_x_train)
pca_test=pca.fit_transform(scaled_x_test)

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve
from sklearn.metrics import confusion_matrix, classification_report

lgr= LogisticRegression(penalty= 'l2')
lgr.fit(pca_train, y_train)

y_pred= lgr.predict(pca_test)

accuracy = accuracy_score(y_test, y_pred)
accuracy

print(classification_report(y_test, y_pred))

dtc=DecisionTreeClassifier(max_depth=4)
dtc.fit(pca_train, y_train)

y_pred2= dtc.predict(pca_test)

accuracy = accuracy_score(y_test, y_pred2)
accuracy

print(classification_report(y_test, y_pred2))

rf=RandomForestClassifier(max_depth=4)
rf.fit(pca_train, y_train)

y_pred3= rf.predict(pca_test)

accuracy = accuracy_score(y_test, y_pred3)
accuracy

print(classification_report(y_test, y_pred3))

svc=SVC(kernel='rbf')
svc.fit(pca_train, y_train)

y_pred4= svc.predict(pca_test)

accuracy = accuracy_score(y_test, y_pred4)
accuracy

print(classification_report(y_test, y_pred4))

knn=KNeighborsClassifier(n_neighbors=100)
knn.fit(pca_train, y_train)

y_pred5= knn.predict(pca_test)

accuracy = accuracy_score(y_test, y_pred5)
accuracy

print(classification_report(y_test, y_pred5))

